---
- name: Run diagnostics on nginx server
  hosts: "{{ target_host }}"
  become: true
  gather_facts: false
  pre_tasks:
  - name: assert that we only have one host in the play
    ansible.builtin.assert:
      that:
        - ansible_play_hosts | length <= 1
      fail_msg: 'Should only be one host in the play.'
    run_once: true
  tasks:
    - name: Check if nginx service is active
      ansible.builtin.systemd:
        name: nginx
      register: nginx_service_result
      failed_when: false

    - name: Validate nginx configuration
      ansible.builtin.command: nginx -t
      register: nginx_config_result
      changed_when: false
      failed_when: false

    - name: Check if firewalld is running
      ansible.builtin.systemd:
        name: firewalld
      register: firewall_result
      failed_when: false

    - name: Check if port 443 is open
      ansible.builtin.command: firewall-cmd --list-ports
      register: firewall_ports_result
      changed_when: false
      failed_when: false

    - name: Set structured diagnostics facts
      ansible.builtin.set_stats:
        data:
          diagnostics:
            nginx_service_active: "{{ nginx_service_result.status.ActiveState == 'active' }}"
            nginx_service_error: >-
              {% if nginx_service_result.status.ActiveState != 'active' %}
                {{ nginx_service_result.status.SubState }}
              {% else %}
                ''
              {% endif %}
            nginx_config_ok: "{{ nginx_config_result.rc == 0 }}"
            nginx_config_error: >-
              {% if nginx_config_result.rc != 0 %}
                {{ nginx_config_result.stderr }}
              {% else %}
                ''
              {% endif %}
            firewall_active: "{{ firewall_result.status.ActiveState == 'active' }}"
            firewall_port_443_open: "{{ '443/tcp' in firewall_ports_result.stdout }}"
            overall_health: >-
              {% if (nginx_service_result.status.ActiveState == 'active') and
                     (nginx_config_result.rc == 0) and
                     (firewall_result.status.ActiveState == 'active') and
                     ('443/tcp' in firewall_ports_result.stdout) %}
                ok
              {% else %}
                issues_detected
              {% endif %}
        per_host: false
        aggregate: true

    - name: Create readable diagnostics report
      ansible.builtin.set_fact:
        diagnostics_report: |
          NGINX service active: {{ nginx_service_result.status.ActiveState == 'active' }}
          NGINX service error: {{ nginx_service_result.status.SubState if nginx_service_result.status.ActiveState != 'active' else '' }}
          NGINX config test ok: {{ nginx_config_result.rc == 0 }}
          NGINX config error: {{ nginx_config_result.stderr if nginx_config_result.rc != 0 else '' }}
          Firewalld active: {{ firewall_result.status.ActiveState == 'active' }}
          Port 443 open: {{ '443/tcp' in firewall_ports_result.stdout }}
          Overall health: {{ 'ok' if (nginx_service_result.status.ActiveState == 'active') and (nginx_config_result.rc == 0) and (firewall_result.status.ActiveState == 'active') and ('443/tcp' in firewall_ports_result.stdout) else 'issues_detected' }}

    - name: Base64 encode the report
      ansible.builtin.set_stats:
        data:
          diagnostics_report_b64: "{{ diagnostics_report | b64encode }}"
        per_host: false
        aggregate: true

###############################################################################################
#####################  UPLOAD REPORT TO SERVICE NOW (IF REQUIRED) ############################
- name: Upload report to ServiceNow
  hosts: localhost
  tasks:
    # Attach sos report if one has been generated
    - name: Upload sos report to ServiceNow incident
      servicenow.itsm.incident:
        sys_id: "{{ incident_sys_id }}"
        other:
          work_notes: "{{ diagnostics_report }}"